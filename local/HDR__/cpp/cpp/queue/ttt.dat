int main(void) → int main() : c <입력값을 모른다 c++ < 입력값이 없다
typedef struct {} Stack; → struct Stack{};
push(&s1, 100); →s1.push(100); 멤버 함수??
– 멤버함수는 반드시 구조체 변수(객체)를 통해서 호출한다.
– 멤버함수는 자신을 호출한 객체를 가르키는 this포인터를 가진다. 
malloc() / fee() → new / delete연산
생성자(constructor) / 소멸자(destructor)
- 생성자 : 객체가 생성될 때 자동적으로 호출되는 멤버함수(init초기화)
- 소멸자 : 객체가 소멸될때 자동적으로 호출되는 멤버함수(cleanup)
접근지정자 private / public 를 통해 구조체에 접근 가능 유무를 구별 할 수 있다.
내부 구현은 숨기고 인터페이스는 외부에 보이게 한다.
내부 구현은 반드시 허용된 연산을 통해서 접근한다.
struct → class
- class(C++) = struct(in C) + member  func, + 접근지정자
<stdio.h> → <cstdio>
네임스페이스가 적용됨 
네임스페이스 → 이름 충돌을 방지하기 위해 쓰는 태그?
(java 패키지(경로))
 printf() → cout << 
std::cout << "s1 1st pop() : " << s1.pop() << std::endl;
컴파일할때 먼저 연산 되기 때문에 std::cout << “~~” → std::cout 가 된다